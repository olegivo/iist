//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oleg_ivo.HighLevelClient.ServiceReferenceHomeTcp {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceHomeTcp.IHighLevelMessageExchangeSystem", CallbackContract=typeof(Oleg_ivo.HighLevelClient.ServiceReferenceHomeTcp.IHighLevelMessageExchangeSystemCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IHighLevelMessageExchangeSystem {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageReceiver/SendMessage", ReplyAction="http://tempuri.org/IMessageReceiver/SendMessageResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelStateMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelDataMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalServiceMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelSubscribeMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalErrorMessage))]
        void SendMessage(DMS.Common.Messages.InternalMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageReceiver/SendMessage", ReplyAction="http://tempuri.org/IMessageReceiver/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(DMS.Common.Messages.InternalMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageReceiver/SendError", ReplyAction="http://tempuri.org/IMessageReceiver/SendErrorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DMS.Common.Exceptions.TestException), Action="http://tempuri.org/IMessageReceiver/SendErrorTestExceptionFault", Name="TestException", Namespace="http://schemas.datacontract.org/2004/07/DMS.Common.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(DMS.Common.Exceptions.RegistrationException), Action="http://tempuri.org/IMessageReceiver/SendErrorRegistrationExceptionFault", Name="RegistrationException", Namespace="http://schemas.datacontract.org/2004/07/DMS.Common.Exceptions")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ApplicationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.TestException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalServiceException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.RegistrationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.SystemException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentOutOfRangeException))]
        void SendError(DMS.Common.Messages.InternalErrorMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageReceiver/SendError", ReplyAction="http://tempuri.org/IMessageReceiver/SendErrorResponse")]
        System.IAsyncResult BeginSendError(DMS.Common.Messages.InternalErrorMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndSendError(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageExchangeSystem/Register", ReplyAction="http://tempuri.org/IMessageExchangeSystem/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DMS.Common.Exceptions.RegistrationException), Action="http://tempuri.org/IMessageExchangeSystem/RegisterRegistrationExceptionFault", Name="RegistrationException", Namespace="http://schemas.datacontract.org/2004/07/DMS.Common.Exceptions")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        void Register(DMS.Common.Messages.RegistrationMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageExchangeSystem/Register", ReplyAction="http://tempuri.org/IMessageExchangeSystem/RegisterResponse")]
        System.IAsyncResult BeginRegister(DMS.Common.Messages.RegistrationMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IMessageExchangeSystem/Unregister", ReplyAction="http://tempuri.org/IMessageExchangeSystem/UnregisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DMS.Common.Exceptions.RegistrationException), Action="http://tempuri.org/IMessageExchangeSystem/UnregisterRegistrationExceptionFault", Name="RegistrationException", Namespace="http://schemas.datacontract.org/2004/07/DMS.Common.Exceptions")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        void Unregister(DMS.Common.Messages.RegistrationMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IMessageExchangeSystem/Unregister", ReplyAction="http://tempuri.org/IMessageExchangeSystem/UnregisterResponse")]
        System.IAsyncResult BeginUnregister(DMS.Common.Messages.RegistrationMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndUnregister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/GetRegisteredChannels", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/GetRegisteredChannelsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelStateMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelDataMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalServiceMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelSubscribeMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalErrorMessage))]
        DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] GetRegisteredChannels(DMS.Common.Messages.InternalMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/GetRegisteredChannels", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/GetRegisteredChannelsResponse")]
        System.IAsyncResult BeginGetRegisteredChannels(DMS.Common.Messages.InternalMessage message, System.AsyncCallback callback, object asyncState);
        
        DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] EndGetRegisteredChannels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelSubscribe", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelSubscribeResponse")]
        void ChannelSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelSubscribe", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelSubscribeResponse")]
        System.IAsyncResult BeginChannelSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndChannelSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnSubscribe", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnSubscribeResponse")]
        void ChannelUnSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnSubscribe", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnSubscribeResponse")]
        System.IAsyncResult BeginChannelUnSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndChannelUnSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/WriteChannel", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/WriteChannelResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelStateMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalServiceMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.DataMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelSubscribeMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.SubscribeMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalErrorMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.LogicalChannelState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Exception))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ApplicationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentOutOfRangeException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.SystemException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.TestException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.RegistrationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalServiceException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel))]
        void WriteChannel(DMS.Common.Messages.InternalLogicalChannelDataMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/WriteChannel", ReplyAction="http://tempuri.org/IHighLevelMessageExchangeSystem/WriteChannelResponse")]
        System.IAsyncResult BeginWriteChannel(DMS.Common.Messages.InternalLogicalChannelDataMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndWriteChannel(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHighLevelMessageExchangeSystemCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageReceiver/SendMessageToClient", ReplyAction="http://tempuri.org/IMessageReceiver/SendMessageToClientResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DMS.Common.Exceptions.InternalException), Action="http://tempuri.org/IMessageReceiver/SendMessageToClientInternalExceptionFault", Name="InternalException", Namespace="http://schemas.datacontract.org/2004/07/DMS.Common.Exceptions")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelStateMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelDataMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalServiceMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelSubscribeMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalErrorMessage))]
        void SendMessageToClient(DMS.Common.Messages.InternalMessage message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageReceiver/SendMessageToClient", ReplyAction="http://tempuri.org/IMessageReceiver/SendMessageToClientResponse")]
        System.IAsyncResult BeginSendMessageToClient(DMS.Common.Messages.InternalMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessageToClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelRegister")]
        void ChannelRegister(DMS.Common.Messages.ChannelRegistrationMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelRegister")]
        System.IAsyncResult BeginChannelRegister(DMS.Common.Messages.ChannelRegistrationMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndChannelRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnRegister")]
        void ChannelUnRegister(DMS.Common.Messages.ChannelRegistrationMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/ChannelUnRegister")]
        System.IAsyncResult BeginChannelUnRegister(DMS.Common.Messages.ChannelRegistrationMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndChannelUnRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/SendReadToClient")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelStateMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalLogicalChannelMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalServiceMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelRegistrationMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.DataMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.ChannelSubscribeMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.SubscribeMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.InternalErrorMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.RegistrationMode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Messages.LogicalChannelState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Exception))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ApplicationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentOutOfRangeException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ArgumentException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.SystemException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.TestException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.RegistrationException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.Exceptions.InternalServiceException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel))]
        void SendReadToClient(DMS.Common.Messages.InternalLogicalChannelDataMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/SendReadToClient")]
        System.IAsyncResult BeginSendReadToClient(DMS.Common.Messages.InternalLogicalChannelDataMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndSendReadToClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/SendChannelStateToClient")]
        void SendChannelStateToClient(DMS.Common.Messages.InternalLogicalChannelStateMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IHighLevelMessageExchangeSystem/SendChannelStateToClient")]
        System.IAsyncResult BeginSendChannelStateToClient(DMS.Common.Messages.InternalLogicalChannelStateMessage message, System.AsyncCallback callback, object asyncState);
        
        void EndSendChannelStateToClient(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHighLevelMessageExchangeSystemChannel : Oleg_ivo.HighLevelClient.ServiceReferenceHomeTcp.IHighLevelMessageExchangeSystem, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRegisteredChannelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRegisteredChannelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HighLevelMessageExchangeSystemClient : System.ServiceModel.DuplexClientBase<Oleg_ivo.HighLevelClient.ServiceReferenceHomeTcp.IHighLevelMessageExchangeSystem>, Oleg_ivo.HighLevelClient.ServiceReferenceHomeTcp.IHighLevelMessageExchangeSystem {
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendErrorDelegate;
        
        private EndOperationDelegate onEndSendErrorDelegate;
        
        private System.Threading.SendOrPostCallback onSendErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnregisterDelegate;
        
        private EndOperationDelegate onEndUnregisterDelegate;
        
        private System.Threading.SendOrPostCallback onUnregisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRegisteredChannelsDelegate;
        
        private EndOperationDelegate onEndGetRegisteredChannelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRegisteredChannelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChannelSubscribeDelegate;
        
        private EndOperationDelegate onEndChannelSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onChannelSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginChannelUnSubscribeDelegate;
        
        private EndOperationDelegate onEndChannelUnSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onChannelUnSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteChannelDelegate;
        
        private EndOperationDelegate onEndWriteChannelDelegate;
        
        private System.Threading.SendOrPostCallback onWriteChannelCompletedDelegate;
        
        public HighLevelMessageExchangeSystemClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public HighLevelMessageExchangeSystemClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public HighLevelMessageExchangeSystemClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HighLevelMessageExchangeSystemClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HighLevelMessageExchangeSystemClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendErrorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnregisterCompleted;
        
        public event System.EventHandler<GetRegisteredChannelsCompletedEventArgs> GetRegisteredChannelsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChannelSubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChannelUnSubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteChannelCompleted;
        
        public void SendMessage(DMS.Common.Messages.InternalMessage message) {
            base.Channel.SendMessage(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendMessage(DMS.Common.Messages.InternalMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.InternalMessage message = ((DMS.Common.Messages.InternalMessage)(inValues[0]));
            return this.BeginSendMessage(message, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            this.EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(DMS.Common.Messages.InternalMessage message) {
            this.SendMessageAsync(message, null);
        }
        
        public void SendMessageAsync(DMS.Common.Messages.InternalMessage message, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        message}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        public void SendError(DMS.Common.Messages.InternalErrorMessage message) {
            base.Channel.SendError(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendError(DMS.Common.Messages.InternalErrorMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendError(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendError(System.IAsyncResult result) {
            base.Channel.EndSendError(result);
        }
        
        private System.IAsyncResult OnBeginSendError(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.InternalErrorMessage message = ((DMS.Common.Messages.InternalErrorMessage)(inValues[0]));
            return this.BeginSendError(message, callback, asyncState);
        }
        
        private object[] OnEndSendError(System.IAsyncResult result) {
            this.EndSendError(result);
            return null;
        }
        
        private void OnSendErrorCompleted(object state) {
            if ((this.SendErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendErrorAsync(DMS.Common.Messages.InternalErrorMessage message) {
            this.SendErrorAsync(message, null);
        }
        
        public void SendErrorAsync(DMS.Common.Messages.InternalErrorMessage message, object userState) {
            if ((this.onBeginSendErrorDelegate == null)) {
                this.onBeginSendErrorDelegate = new BeginOperationDelegate(this.OnBeginSendError);
            }
            if ((this.onEndSendErrorDelegate == null)) {
                this.onEndSendErrorDelegate = new EndOperationDelegate(this.OnEndSendError);
            }
            if ((this.onSendErrorCompletedDelegate == null)) {
                this.onSendErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendErrorCompleted);
            }
            base.InvokeAsync(this.onBeginSendErrorDelegate, new object[] {
                        message}, this.onEndSendErrorDelegate, this.onSendErrorCompletedDelegate, userState);
        }
        
        public void Register(DMS.Common.Messages.RegistrationMessage message) {
            base.Channel.Register(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegister(DMS.Common.Messages.RegistrationMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRegister(System.IAsyncResult result) {
            base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.RegistrationMessage message = ((DMS.Common.Messages.RegistrationMessage)(inValues[0]));
            return this.BeginRegister(message, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            this.EndRegister(result);
            return null;
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(DMS.Common.Messages.RegistrationMessage message) {
            this.RegisterAsync(message, null);
        }
        
        public void RegisterAsync(DMS.Common.Messages.RegistrationMessage message, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        message}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        public void Unregister(DMS.Common.Messages.RegistrationMessage message) {
            base.Channel.Unregister(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnregister(DMS.Common.Messages.RegistrationMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnregister(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnregister(System.IAsyncResult result) {
            base.Channel.EndUnregister(result);
        }
        
        private System.IAsyncResult OnBeginUnregister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.RegistrationMessage message = ((DMS.Common.Messages.RegistrationMessage)(inValues[0]));
            return this.BeginUnregister(message, callback, asyncState);
        }
        
        private object[] OnEndUnregister(System.IAsyncResult result) {
            this.EndUnregister(result);
            return null;
        }
        
        private void OnUnregisterCompleted(object state) {
            if ((this.UnregisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnregisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnregisterAsync(DMS.Common.Messages.RegistrationMessage message) {
            this.UnregisterAsync(message, null);
        }
        
        public void UnregisterAsync(DMS.Common.Messages.RegistrationMessage message, object userState) {
            if ((this.onBeginUnregisterDelegate == null)) {
                this.onBeginUnregisterDelegate = new BeginOperationDelegate(this.OnBeginUnregister);
            }
            if ((this.onEndUnregisterDelegate == null)) {
                this.onEndUnregisterDelegate = new EndOperationDelegate(this.OnEndUnregister);
            }
            if ((this.onUnregisterCompletedDelegate == null)) {
                this.onUnregisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnregisterCompleted);
            }
            base.InvokeAsync(this.onBeginUnregisterDelegate, new object[] {
                        message}, this.onEndUnregisterDelegate, this.onUnregisterCompletedDelegate, userState);
        }
        
        public DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] GetRegisteredChannels(DMS.Common.Messages.InternalMessage message) {
            return base.Channel.GetRegisteredChannels(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRegisteredChannels(DMS.Common.Messages.InternalMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRegisteredChannels(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] EndGetRegisteredChannels(System.IAsyncResult result) {
            return base.Channel.EndGetRegisteredChannels(result);
        }
        
        private System.IAsyncResult OnBeginGetRegisteredChannels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.InternalMessage message = ((DMS.Common.Messages.InternalMessage)(inValues[0]));
            return this.BeginGetRegisteredChannels(message, callback, asyncState);
        }
        
        private object[] OnEndGetRegisteredChannels(System.IAsyncResult result) {
            DMS.Common.MessageExchangeSystem.HighLevel.RegisteredLogicalChannel[] retVal = this.EndGetRegisteredChannels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRegisteredChannelsCompleted(object state) {
            if ((this.GetRegisteredChannelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRegisteredChannelsCompleted(this, new GetRegisteredChannelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRegisteredChannelsAsync(DMS.Common.Messages.InternalMessage message) {
            this.GetRegisteredChannelsAsync(message, null);
        }
        
        public void GetRegisteredChannelsAsync(DMS.Common.Messages.InternalMessage message, object userState) {
            if ((this.onBeginGetRegisteredChannelsDelegate == null)) {
                this.onBeginGetRegisteredChannelsDelegate = new BeginOperationDelegate(this.OnBeginGetRegisteredChannels);
            }
            if ((this.onEndGetRegisteredChannelsDelegate == null)) {
                this.onEndGetRegisteredChannelsDelegate = new EndOperationDelegate(this.OnEndGetRegisteredChannels);
            }
            if ((this.onGetRegisteredChannelsCompletedDelegate == null)) {
                this.onGetRegisteredChannelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRegisteredChannelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRegisteredChannelsDelegate, new object[] {
                        message}, this.onEndGetRegisteredChannelsDelegate, this.onGetRegisteredChannelsCompletedDelegate, userState);
        }
        
        public void ChannelSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message) {
            base.Channel.ChannelSubscribe(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChannelSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChannelSubscribe(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndChannelSubscribe(System.IAsyncResult result) {
            base.Channel.EndChannelSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginChannelSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.ChannelSubscribeMessage message = ((DMS.Common.Messages.ChannelSubscribeMessage)(inValues[0]));
            return this.BeginChannelSubscribe(message, callback, asyncState);
        }
        
        private object[] OnEndChannelSubscribe(System.IAsyncResult result) {
            this.EndChannelSubscribe(result);
            return null;
        }
        
        private void OnChannelSubscribeCompleted(object state) {
            if ((this.ChannelSubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChannelSubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChannelSubscribeAsync(DMS.Common.Messages.ChannelSubscribeMessage message) {
            this.ChannelSubscribeAsync(message, null);
        }
        
        public void ChannelSubscribeAsync(DMS.Common.Messages.ChannelSubscribeMessage message, object userState) {
            if ((this.onBeginChannelSubscribeDelegate == null)) {
                this.onBeginChannelSubscribeDelegate = new BeginOperationDelegate(this.OnBeginChannelSubscribe);
            }
            if ((this.onEndChannelSubscribeDelegate == null)) {
                this.onEndChannelSubscribeDelegate = new EndOperationDelegate(this.OnEndChannelSubscribe);
            }
            if ((this.onChannelSubscribeCompletedDelegate == null)) {
                this.onChannelSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChannelSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginChannelSubscribeDelegate, new object[] {
                        message}, this.onEndChannelSubscribeDelegate, this.onChannelSubscribeCompletedDelegate, userState);
        }
        
        public void ChannelUnSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message) {
            base.Channel.ChannelUnSubscribe(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChannelUnSubscribe(DMS.Common.Messages.ChannelSubscribeMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChannelUnSubscribe(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndChannelUnSubscribe(System.IAsyncResult result) {
            base.Channel.EndChannelUnSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginChannelUnSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.ChannelSubscribeMessage message = ((DMS.Common.Messages.ChannelSubscribeMessage)(inValues[0]));
            return this.BeginChannelUnSubscribe(message, callback, asyncState);
        }
        
        private object[] OnEndChannelUnSubscribe(System.IAsyncResult result) {
            this.EndChannelUnSubscribe(result);
            return null;
        }
        
        private void OnChannelUnSubscribeCompleted(object state) {
            if ((this.ChannelUnSubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChannelUnSubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChannelUnSubscribeAsync(DMS.Common.Messages.ChannelSubscribeMessage message) {
            this.ChannelUnSubscribeAsync(message, null);
        }
        
        public void ChannelUnSubscribeAsync(DMS.Common.Messages.ChannelSubscribeMessage message, object userState) {
            if ((this.onBeginChannelUnSubscribeDelegate == null)) {
                this.onBeginChannelUnSubscribeDelegate = new BeginOperationDelegate(this.OnBeginChannelUnSubscribe);
            }
            if ((this.onEndChannelUnSubscribeDelegate == null)) {
                this.onEndChannelUnSubscribeDelegate = new EndOperationDelegate(this.OnEndChannelUnSubscribe);
            }
            if ((this.onChannelUnSubscribeCompletedDelegate == null)) {
                this.onChannelUnSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChannelUnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginChannelUnSubscribeDelegate, new object[] {
                        message}, this.onEndChannelUnSubscribeDelegate, this.onChannelUnSubscribeCompletedDelegate, userState);
        }
        
        public void WriteChannel(DMS.Common.Messages.InternalLogicalChannelDataMessage message) {
            base.Channel.WriteChannel(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginWriteChannel(DMS.Common.Messages.InternalLogicalChannelDataMessage message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteChannel(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndWriteChannel(System.IAsyncResult result) {
            base.Channel.EndWriteChannel(result);
        }
        
        private System.IAsyncResult OnBeginWriteChannel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DMS.Common.Messages.InternalLogicalChannelDataMessage message = ((DMS.Common.Messages.InternalLogicalChannelDataMessage)(inValues[0]));
            return this.BeginWriteChannel(message, callback, asyncState);
        }
        
        private object[] OnEndWriteChannel(System.IAsyncResult result) {
            this.EndWriteChannel(result);
            return null;
        }
        
        private void OnWriteChannelCompleted(object state) {
            if ((this.WriteChannelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteChannelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteChannelAsync(DMS.Common.Messages.InternalLogicalChannelDataMessage message) {
            this.WriteChannelAsync(message, null);
        }
        
        public void WriteChannelAsync(DMS.Common.Messages.InternalLogicalChannelDataMessage message, object userState) {
            if ((this.onBeginWriteChannelDelegate == null)) {
                this.onBeginWriteChannelDelegate = new BeginOperationDelegate(this.OnBeginWriteChannel);
            }
            if ((this.onEndWriteChannelDelegate == null)) {
                this.onEndWriteChannelDelegate = new EndOperationDelegate(this.OnEndWriteChannel);
            }
            if ((this.onWriteChannelCompletedDelegate == null)) {
                this.onWriteChannelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteChannelCompleted);
            }
            base.InvokeAsync(this.onBeginWriteChannelDelegate, new object[] {
                        message}, this.onEndWriteChannelDelegate, this.onWriteChannelCompletedDelegate, userState);
        }
    }
}
