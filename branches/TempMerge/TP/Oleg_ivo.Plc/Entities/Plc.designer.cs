#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oleg_ivo.Plc.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Plc27")]
	public partial class PlcDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFieldBus(FieldBus instance);
    partial void UpdateFieldBus(FieldBus instance);
    partial void DeleteFieldBus(FieldBus instance);
    partial void InsertFieldBusType(FieldBusType instance);
    partial void UpdateFieldBusType(FieldBusType instance);
    partial void DeleteFieldBusType(FieldBusType instance);
    partial void InsertPhysicalChannel(PhysicalChannel instance);
    partial void UpdatePhysicalChannel(PhysicalChannel instance);
    partial void DeletePhysicalChannel(PhysicalChannel instance);
    partial void InsertLogicalChannel(LogicalChannel instance);
    partial void UpdateLogicalChannel(LogicalChannel instance);
    partial void DeleteLogicalChannel(LogicalChannel instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertMeasurementUnit(MeasurementUnit instance);
    partial void UpdateMeasurementUnit(MeasurementUnit instance);
    partial void DeleteMeasurementUnit(MeasurementUnit instance);
    partial void InsertFieldBusNode(FieldBusNode instance);
    partial void UpdateFieldBusNode(FieldBusNode instance);
    partial void DeleteFieldBusNode(FieldBusNode instance);
    #endregion
		
		public PlcDataContext() : 
				base(global::Oleg_ivo.Plc.Properties.Settings.Default.Plc27ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PlcDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlcDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlcDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlcDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FieldBus> FieldBus
		{
			get
			{
				return this.GetTable<FieldBus>();
			}
		}
		
		public System.Data.Linq.Table<FieldBusType> FieldBusTypes
		{
			get
			{
				return this.GetTable<FieldBusType>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalChannel> PhysicalChannels
		{
			get
			{
				return this.GetTable<PhysicalChannel>();
			}
		}
		
		public System.Data.Linq.Table<LogicalChannel> LogicalChannels
		{
			get
			{
				return this.GetTable<LogicalChannel>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<MeasurementUnit> MeasurementUnits
		{
			get
			{
				return this.GetTable<MeasurementUnit>();
			}
		}
		
		public System.Data.Linq.Table<FieldBusNode> FieldBusNodes
		{
			get
			{
				return this.GetTable<FieldBusNode>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldBus")]
	public partial class FieldBus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FieldBusTypeId;
		
		private string _FieldBusName;
		
		private EntitySet<FieldBusNode> _FieldBusNodes;
		
		private EntityRef<FieldBusType> _FieldBusType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldBusTypeIdChanging(System.Nullable<int> value);
    partial void OnFieldBusTypeIdChanged();
    partial void OnFieldBusNameChanging(string value);
    partial void OnFieldBusNameChanged();
    #endregion
		
		public FieldBus()
		{
			this._FieldBusNodes = new EntitySet<FieldBusNode>(new Action<FieldBusNode>(this.attach_FieldBusNodes), new Action<FieldBusNode>(this.detach_FieldBusNodes));
			this._FieldBusType = default(EntityRef<FieldBusType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBusTypeId", DbType="Int")]
		public System.Nullable<int> FieldBusTypeId
		{
			get
			{
				return this._FieldBusTypeId;
			}
			set
			{
				if ((this._FieldBusTypeId != value))
				{
					if (this._FieldBusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldBusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FieldBusTypeId = value;
					this.SendPropertyChanged("FieldBusTypeId");
					this.OnFieldBusTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBusName", DbType="NVarChar(255)")]
		public string FieldBusName
		{
			get
			{
				return this._FieldBusName;
			}
			set
			{
				if ((this._FieldBusName != value))
				{
					this.OnFieldBusNameChanging(value);
					this.SendPropertyChanging();
					this._FieldBusName = value;
					this.SendPropertyChanged("FieldBusName");
					this.OnFieldBusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBus_FieldBusNode", Storage="_FieldBusNodes", ThisKey="Id", OtherKey="FieldBusId")]
		public EntitySet<FieldBusNode> FieldBusNodes
		{
			get
			{
				return this._FieldBusNodes;
			}
			set
			{
				this._FieldBusNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBusType_FieldBus", Storage="_FieldBusType", ThisKey="FieldBusTypeId", OtherKey="Id", IsForeignKey=true)]
		public FieldBusType FieldBusType
		{
			get
			{
				return this._FieldBusType.Entity;
			}
			set
			{
				FieldBusType previousValue = this._FieldBusType.Entity;
				if (((previousValue != value) 
							|| (this._FieldBusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldBusType.Entity = null;
						previousValue.FieldBus.Remove(this);
					}
					this._FieldBusType.Entity = value;
					if ((value != null))
					{
						value.FieldBus.Add(this);
						this._FieldBusTypeId = value.Id;
					}
					else
					{
						this._FieldBusTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldBusType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldBusNodes(FieldBusNode entity)
		{
			this.SendPropertyChanging();
			entity.FieldBus = this;
		}
		
		private void detach_FieldBusNodes(FieldBusNode entity)
		{
			this.SendPropertyChanging();
			entity.FieldBus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldBusType")]
	public partial class FieldBusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FieldBusName;
		
		private string _Description;
		
		private EntitySet<FieldBus> _FieldBus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldBusNameChanging(string value);
    partial void OnFieldBusNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public FieldBusType()
		{
			this._FieldBus = new EntitySet<FieldBus>(new Action<FieldBus>(this.attach_FieldBus), new Action<FieldBus>(this.detach_FieldBus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBusName", DbType="NVarChar(255)")]
		public string FieldBusName
		{
			get
			{
				return this._FieldBusName;
			}
			set
			{
				if ((this._FieldBusName != value))
				{
					this.OnFieldBusNameChanging(value);
					this.SendPropertyChanging();
					this._FieldBusName = value;
					this.SendPropertyChanged("FieldBusName");
					this.OnFieldBusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBusType_FieldBus", Storage="_FieldBus", ThisKey="Id", OtherKey="FieldBusTypeId")]
		public EntitySet<FieldBus> FieldBus
		{
			get
			{
				return this._FieldBus;
			}
			set
			{
				this._FieldBus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldBus(FieldBus entity)
		{
			this.SendPropertyChanging();
			entity.FieldBusType = this;
		}
		
		private void detach_FieldBus(FieldBus entity)
		{
			this.SendPropertyChanging();
			entity.FieldBusType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalChannel")]
	public partial class PhysicalChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FieldNodeId;
		
		private System.Nullable<short> _AddressShift;
		
		private System.Nullable<int> _ReadAddress;
		
		private System.Nullable<int> _WriteAddress;
		
		private System.Nullable<int> _PhysicalChannelSize;
		
		private bool _IsInput;
		
		private bool _IsOutput;
		
		private bool _IsAnalog;
		
		private bool _IsDiscrete;
		
		private string _Description;
		
		private System.Nullable<int> _Register;
		
		private EntitySet<LogicalChannel> _LogicalChannels;
		
		private EntityRef<FieldBusNode> _FieldBusNode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldNodeIdChanging(System.Nullable<int> value);
    partial void OnFieldNodeIdChanged();
    partial void OnAddressShiftChanging(System.Nullable<short> value);
    partial void OnAddressShiftChanged();
    partial void OnReadAddressChanging(System.Nullable<int> value);
    partial void OnReadAddressChanged();
    partial void OnWriteAddressChanging(System.Nullable<int> value);
    partial void OnWriteAddressChanged();
    partial void OnPhysicalChannelSizeChanging(System.Nullable<int> value);
    partial void OnPhysicalChannelSizeChanged();
    partial void OnIsInputChanging(bool value);
    partial void OnIsInputChanged();
    partial void OnIsOutputChanging(bool value);
    partial void OnIsOutputChanged();
    partial void OnIsAnalogChanging(bool value);
    partial void OnIsAnalogChanged();
    partial void OnIsDiscreteChanging(bool value);
    partial void OnIsDiscreteChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRegisterChanging(System.Nullable<int> value);
    partial void OnRegisterChanged();
    #endregion
		
		public PhysicalChannel()
		{
			this._LogicalChannels = new EntitySet<LogicalChannel>(new Action<LogicalChannel>(this.attach_LogicalChannels), new Action<LogicalChannel>(this.detach_LogicalChannels));
			this._FieldBusNode = default(EntityRef<FieldBusNode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldNodeId", DbType="Int")]
		public System.Nullable<int> FieldNodeId
		{
			get
			{
				return this._FieldNodeId;
			}
			set
			{
				if ((this._FieldNodeId != value))
				{
					if (this._FieldBusNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldNodeIdChanging(value);
					this.SendPropertyChanging();
					this._FieldNodeId = value;
					this.SendPropertyChanged("FieldNodeId");
					this.OnFieldNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressShift", DbType="SmallInt")]
		public System.Nullable<short> AddressShift
		{
			get
			{
				return this._AddressShift;
			}
			set
			{
				if ((this._AddressShift != value))
				{
					this.OnAddressShiftChanging(value);
					this.SendPropertyChanging();
					this._AddressShift = value;
					this.SendPropertyChanged("AddressShift");
					this.OnAddressShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadAddress", DbType="Int")]
		public System.Nullable<int> ReadAddress
		{
			get
			{
				return this._ReadAddress;
			}
			set
			{
				if ((this._ReadAddress != value))
				{
					this.OnReadAddressChanging(value);
					this.SendPropertyChanging();
					this._ReadAddress = value;
					this.SendPropertyChanged("ReadAddress");
					this.OnReadAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteAddress", DbType="Int")]
		public System.Nullable<int> WriteAddress
		{
			get
			{
				return this._WriteAddress;
			}
			set
			{
				if ((this._WriteAddress != value))
				{
					this.OnWriteAddressChanging(value);
					this.SendPropertyChanging();
					this._WriteAddress = value;
					this.SendPropertyChanged("WriteAddress");
					this.OnWriteAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalChannelSize", DbType="Int")]
		public System.Nullable<int> PhysicalChannelSize
		{
			get
			{
				return this._PhysicalChannelSize;
			}
			set
			{
				if ((this._PhysicalChannelSize != value))
				{
					this.OnPhysicalChannelSizeChanging(value);
					this.SendPropertyChanging();
					this._PhysicalChannelSize = value;
					this.SendPropertyChanged("PhysicalChannelSize");
					this.OnPhysicalChannelSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInput", DbType="Bit NOT NULL")]
		public bool IsInput
		{
			get
			{
				return this._IsInput;
			}
			set
			{
				if ((this._IsInput != value))
				{
					this.OnIsInputChanging(value);
					this.SendPropertyChanging();
					this._IsInput = value;
					this.SendPropertyChanged("IsInput");
					this.OnIsInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOutput", DbType="Bit NOT NULL")]
		public bool IsOutput
		{
			get
			{
				return this._IsOutput;
			}
			set
			{
				if ((this._IsOutput != value))
				{
					this.OnIsOutputChanging(value);
					this.SendPropertyChanging();
					this._IsOutput = value;
					this.SendPropertyChanged("IsOutput");
					this.OnIsOutputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnalog", DbType="Bit NOT NULL")]
		public bool IsAnalog
		{
			get
			{
				return this._IsAnalog;
			}
			set
			{
				if ((this._IsAnalog != value))
				{
					this.OnIsAnalogChanging(value);
					this.SendPropertyChanging();
					this._IsAnalog = value;
					this.SendPropertyChanged("IsAnalog");
					this.OnIsAnalogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDiscrete", DbType="Bit NOT NULL")]
		public bool IsDiscrete
		{
			get
			{
				return this._IsDiscrete;
			}
			set
			{
				if ((this._IsDiscrete != value))
				{
					this.OnIsDiscreteChanging(value);
					this.SendPropertyChanging();
					this._IsDiscrete = value;
					this.SendPropertyChanged("IsDiscrete");
					this.OnIsDiscreteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Register", DbType="Int")]
		public System.Nullable<int> Register
		{
			get
			{
				return this._Register;
			}
			set
			{
				if ((this._Register != value))
				{
					this.OnRegisterChanging(value);
					this.SendPropertyChanging();
					this._Register = value;
					this.SendPropertyChanged("Register");
					this.OnRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalChannel_LogicalChannel", Storage="_LogicalChannels", ThisKey="Id", OtherKey="PhysicalChannelId")]
		public EntitySet<LogicalChannel> LogicalChannels
		{
			get
			{
				return this._LogicalChannels;
			}
			set
			{
				this._LogicalChannels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBusNode_PhysicalChannel", Storage="_FieldBusNode", ThisKey="FieldNodeId", OtherKey="Id", IsForeignKey=true)]
		public FieldBusNode FieldBusNode
		{
			get
			{
				return this._FieldBusNode.Entity;
			}
			set
			{
				FieldBusNode previousValue = this._FieldBusNode.Entity;
				if (((previousValue != value) 
							|| (this._FieldBusNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldBusNode.Entity = null;
						previousValue.PhysicalChannels.Remove(this);
					}
					this._FieldBusNode.Entity = value;
					if ((value != null))
					{
						value.PhysicalChannels.Add(this);
						this._FieldNodeId = value.Id;
					}
					else
					{
						this._FieldNodeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FieldBusNode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogicalChannels(LogicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.PhysicalChannel = this;
		}
		
		private void detach_LogicalChannels(LogicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.PhysicalChannel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogicalChannel")]
	public partial class LogicalChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ParameterId;
		
		private System.Nullable<int> _PhysicalChannelId;
		
		private string _DirectPolynom;
		
		private string _ReversePolynom;
		
		private System.Nullable<int> _Size;
		
		private System.Nullable<int> _AddressShift;
		
		private System.Nullable<decimal> _PollPeriod;
		
		private string _Description;
		
		private System.Nullable<decimal> _SensivityDelta;
		
		private System.Nullable<decimal> _MinValue;
		
		private System.Nullable<decimal> _MaxValue;
		
		private System.Nullable<decimal> _MinNormalValue;
		
		private System.Nullable<decimal> _MaxNormalValue;
		
		private EntityRef<PhysicalChannel> _PhysicalChannel;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParameterIdChanging(System.Nullable<int> value);
    partial void OnParameterIdChanged();
    partial void OnPhysicalChannelIdChanging(System.Nullable<int> value);
    partial void OnPhysicalChannelIdChanged();
    partial void OnDirectPolynomChanging(string value);
    partial void OnDirectPolynomChanged();
    partial void OnReversePolynomChanging(string value);
    partial void OnReversePolynomChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnAddressShiftChanging(System.Nullable<int> value);
    partial void OnAddressShiftChanged();
    partial void OnPollPeriodChanging(System.Nullable<decimal> value);
    partial void OnPollPeriodChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSensivityDeltaChanging(System.Nullable<decimal> value);
    partial void OnSensivityDeltaChanged();
    partial void OnMinValueChanging(System.Nullable<decimal> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<decimal> value);
    partial void OnMaxValueChanged();
    partial void OnMinNormalValueChanging(System.Nullable<decimal> value);
    partial void OnMinNormalValueChanged();
    partial void OnMaxNormalValueChanging(System.Nullable<decimal> value);
    partial void OnMaxNormalValueChanged();
    #endregion
		
		public LogicalChannel()
		{
			this._PhysicalChannel = default(EntityRef<PhysicalChannel>);
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterId", DbType="Int")]
		public System.Nullable<int> ParameterId
		{
			get
			{
				return this._ParameterId;
			}
			set
			{
				if ((this._ParameterId != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIdChanging(value);
					this.SendPropertyChanging();
					this._ParameterId = value;
					this.SendPropertyChanged("ParameterId");
					this.OnParameterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalChannelId", DbType="Int")]
		public System.Nullable<int> PhysicalChannelId
		{
			get
			{
				return this._PhysicalChannelId;
			}
			set
			{
				if ((this._PhysicalChannelId != value))
				{
					if (this._PhysicalChannel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicalChannelIdChanging(value);
					this.SendPropertyChanging();
					this._PhysicalChannelId = value;
					this.SendPropertyChanged("PhysicalChannelId");
					this.OnPhysicalChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectPolynom", DbType="NVarChar(MAX)")]
		public string DirectPolynom
		{
			get
			{
				return this._DirectPolynom;
			}
			set
			{
				if ((this._DirectPolynom != value))
				{
					this.OnDirectPolynomChanging(value);
					this.SendPropertyChanging();
					this._DirectPolynom = value;
					this.SendPropertyChanged("DirectPolynom");
					this.OnDirectPolynomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReversePolynom", DbType="NVarChar(MAX)")]
		public string ReversePolynom
		{
			get
			{
				return this._ReversePolynom;
			}
			set
			{
				if ((this._ReversePolynom != value))
				{
					this.OnReversePolynomChanging(value);
					this.SendPropertyChanging();
					this._ReversePolynom = value;
					this.SendPropertyChanged("ReversePolynom");
					this.OnReversePolynomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int")]
		public System.Nullable<int> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressShift", DbType="Int")]
		public System.Nullable<int> AddressShift
		{
			get
			{
				return this._AddressShift;
			}
			set
			{
				if ((this._AddressShift != value))
				{
					this.OnAddressShiftChanging(value);
					this.SendPropertyChanging();
					this._AddressShift = value;
					this.SendPropertyChanged("AddressShift");
					this.OnAddressShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollPeriod", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> PollPeriod
		{
			get
			{
				return this._PollPeriod;
			}
			set
			{
				if ((this._PollPeriod != value))
				{
					this.OnPollPeriodChanging(value);
					this.SendPropertyChanging();
					this._PollPeriod = value;
					this.SendPropertyChanged("PollPeriod");
					this.OnPollPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensivityDelta", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> SensivityDelta
		{
			get
			{
				return this._SensivityDelta;
			}
			set
			{
				if ((this._SensivityDelta != value))
				{
					this.OnSensivityDeltaChanging(value);
					this.SendPropertyChanging();
					this._SensivityDelta = value;
					this.SendPropertyChanged("SensivityDelta");
					this.OnSensivityDeltaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinNormalValue", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> MinNormalValue
		{
			get
			{
				return this._MinNormalValue;
			}
			set
			{
				if ((this._MinNormalValue != value))
				{
					this.OnMinNormalValueChanging(value);
					this.SendPropertyChanging();
					this._MinNormalValue = value;
					this.SendPropertyChanged("MinNormalValue");
					this.OnMinNormalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxNormalValue", DbType="Decimal(18,10)")]
		public System.Nullable<decimal> MaxNormalValue
		{
			get
			{
				return this._MaxNormalValue;
			}
			set
			{
				if ((this._MaxNormalValue != value))
				{
					this.OnMaxNormalValueChanging(value);
					this.SendPropertyChanging();
					this._MaxNormalValue = value;
					this.SendPropertyChanged("MaxNormalValue");
					this.OnMaxNormalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalChannel_LogicalChannel", Storage="_PhysicalChannel", ThisKey="PhysicalChannelId", OtherKey="Id", IsForeignKey=true)]
		public PhysicalChannel PhysicalChannel
		{
			get
			{
				return this._PhysicalChannel.Entity;
			}
			set
			{
				PhysicalChannel previousValue = this._PhysicalChannel.Entity;
				if (((previousValue != value) 
							|| (this._PhysicalChannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhysicalChannel.Entity = null;
						previousValue.LogicalChannels.Remove(this);
					}
					this._PhysicalChannel.Entity = value;
					if ((value != null))
					{
						value.LogicalChannels.Add(this);
						this._PhysicalChannelId = value.Id;
					}
					else
					{
						this._PhysicalChannelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PhysicalChannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_LogicalChannel", Storage="_Parameter", ThisKey="ParameterId", OtherKey="Id", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.LogicalChannels.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.LogicalChannels.Add(this);
						this._ParameterId = value.Id;
					}
					else
					{
						this._ParameterId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MeasurementUnitId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<LogicalChannel> _LogicalChannels;
		
		private EntityRef<MeasurementUnit> _MeasurementUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMeasurementUnitIdChanging(int value);
    partial void OnMeasurementUnitIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Parameter()
		{
			this._LogicalChannels = new EntitySet<LogicalChannel>(new Action<LogicalChannel>(this.attach_LogicalChannels), new Action<LogicalChannel>(this.detach_LogicalChannels));
			this._MeasurementUnit = default(EntityRef<MeasurementUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasurementUnitId", DbType="Int NOT NULL")]
		public int MeasurementUnitId
		{
			get
			{
				return this._MeasurementUnitId;
			}
			set
			{
				if ((this._MeasurementUnitId != value))
				{
					if (this._MeasurementUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasurementUnitIdChanging(value);
					this.SendPropertyChanging();
					this._MeasurementUnitId = value;
					this.SendPropertyChanged("MeasurementUnitId");
					this.OnMeasurementUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_LogicalChannel", Storage="_LogicalChannels", ThisKey="Id", OtherKey="ParameterId")]
		public EntitySet<LogicalChannel> LogicalChannels
		{
			get
			{
				return this._LogicalChannels;
			}
			set
			{
				this._LogicalChannels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementUnit_Parameter", Storage="_MeasurementUnit", ThisKey="MeasurementUnitId", OtherKey="Id", IsForeignKey=true)]
		public MeasurementUnit MeasurementUnit
		{
			get
			{
				return this._MeasurementUnit.Entity;
			}
			set
			{
				MeasurementUnit previousValue = this._MeasurementUnit.Entity;
				if (((previousValue != value) 
							|| (this._MeasurementUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeasurementUnit.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._MeasurementUnit.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._MeasurementUnitId = value.Id;
					}
					else
					{
						this._MeasurementUnitId = default(int);
					}
					this.SendPropertyChanged("MeasurementUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogicalChannels(LogicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_LogicalChannels(LogicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeasurementUnit")]
	public partial class MeasurementUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Parameter> _Parameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MeasurementUnit()
		{
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeasurementUnit_Parameter", Storage="_Parameters", ThisKey="Id", OtherKey="MeasurementUnitId")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementUnit = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.MeasurementUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldBusNode")]
	public partial class FieldBusNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FieldBusId;
		
		private System.Nullable<int> _FieldBusTypeId;
		
		private string _AddressPart1;
		
		private System.Nullable<int> _AddressPart2;
		
		private bool _Enabled;
		
		private EntitySet<PhysicalChannel> _PhysicalChannels;
		
		private EntityRef<FieldBus> _FieldBus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFieldBusIdChanging(int value);
    partial void OnFieldBusIdChanged();
    partial void OnFieldBusTypeIdChanging(System.Nullable<int> value);
    partial void OnFieldBusTypeIdChanged();
    partial void OnAddressPart1Changing(string value);
    partial void OnAddressPart1Changed();
    partial void OnAddressPart2Changing(System.Nullable<int> value);
    partial void OnAddressPart2Changed();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public FieldBusNode()
		{
			this._PhysicalChannels = new EntitySet<PhysicalChannel>(new Action<PhysicalChannel>(this.attach_PhysicalChannels), new Action<PhysicalChannel>(this.detach_PhysicalChannels));
			this._FieldBus = default(EntityRef<FieldBus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBusId", DbType="Int NOT NULL")]
		public int FieldBusId
		{
			get
			{
				return this._FieldBusId;
			}
			set
			{
				if ((this._FieldBusId != value))
				{
					if (this._FieldBus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldBusIdChanging(value);
					this.SendPropertyChanging();
					this._FieldBusId = value;
					this.SendPropertyChanged("FieldBusId");
					this.OnFieldBusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldBusTypeId", DbType="Int")]
		public System.Nullable<int> FieldBusTypeId
		{
			get
			{
				return this._FieldBusTypeId;
			}
			set
			{
				if ((this._FieldBusTypeId != value))
				{
					this.OnFieldBusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FieldBusTypeId = value;
					this.SendPropertyChanged("FieldBusTypeId");
					this.OnFieldBusTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressPart1", DbType="NVarChar(255)")]
		public string AddressPart1
		{
			get
			{
				return this._AddressPart1;
			}
			set
			{
				if ((this._AddressPart1 != value))
				{
					this.OnAddressPart1Changing(value);
					this.SendPropertyChanging();
					this._AddressPart1 = value;
					this.SendPropertyChanged("AddressPart1");
					this.OnAddressPart1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressPart2", DbType="Int")]
		public System.Nullable<int> AddressPart2
		{
			get
			{
				return this._AddressPart2;
			}
			set
			{
				if ((this._AddressPart2 != value))
				{
					this.OnAddressPart2Changing(value);
					this.SendPropertyChanging();
					this._AddressPart2 = value;
					this.SendPropertyChanged("AddressPart2");
					this.OnAddressPart2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBusNode_PhysicalChannel", Storage="_PhysicalChannels", ThisKey="Id", OtherKey="FieldNodeId")]
		public EntitySet<PhysicalChannel> PhysicalChannels
		{
			get
			{
				return this._PhysicalChannels;
			}
			set
			{
				this._PhysicalChannels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldBus_FieldBusNode", Storage="_FieldBus", ThisKey="FieldBusId", OtherKey="Id", IsForeignKey=true)]
		public FieldBus FieldBus
		{
			get
			{
				return this._FieldBus.Entity;
			}
			set
			{
				FieldBus previousValue = this._FieldBus.Entity;
				if (((previousValue != value) 
							|| (this._FieldBus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldBus.Entity = null;
						previousValue.FieldBusNodes.Remove(this);
					}
					this._FieldBus.Entity = value;
					if ((value != null))
					{
						value.FieldBusNodes.Add(this);
						this._FieldBusId = value.Id;
					}
					else
					{
						this._FieldBusId = default(int);
					}
					this.SendPropertyChanged("FieldBus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhysicalChannels(PhysicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.FieldBusNode = this;
		}
		
		private void detach_PhysicalChannels(PhysicalChannel entity)
		{
			this.SendPropertyChanging();
			entity.FieldBusNode = null;
		}
	}
}
#pragma warning restore 1591
